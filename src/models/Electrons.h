/**
 *
 *  Electrons.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace database_test
{

class Electrons
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _platform;
        static const std::string _version;
        static const std::string _archs;
        static const std::string _url;
        static const std::string _force_update;
        static const std::string _type;
        static const std::string _actived;
        static const std::string _remark;
        static const std::string _ext;
        static const std::string _createdAt;
        static const std::string _updatedAt;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = int32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Electrons(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Electrons(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Electrons(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Electrons() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const int32_t &pId) noexcept;

    /**  For column platform  */
    ///Get the value of the column platform, returns the default value if the column is null
    const std::string &getValueOfPlatform() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPlatform() const noexcept;
    ///Set the value of the column platform
    void setPlatform(const std::string &pPlatform) noexcept;
    void setPlatform(std::string &&pPlatform) noexcept;
    void setPlatformToNull() noexcept;

    /**  For column version  */
    ///Get the value of the column version, returns the default value if the column is null
    const std::string &getValueOfVersion() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getVersion() const noexcept;
    ///Set the value of the column version
    void setVersion(const std::string &pVersion) noexcept;
    void setVersion(std::string &&pVersion) noexcept;

    /**  For column archs  */
    ///Get the value of the column archs, returns the default value if the column is null
    const std::string &getValueOfArchs() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getArchs() const noexcept;
    ///Set the value of the column archs
    void setArchs(const std::string &pArchs) noexcept;
    void setArchs(std::string &&pArchs) noexcept;

    /**  For column url  */
    ///Get the value of the column url, returns the default value if the column is null
    const std::string &getValueOfUrl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUrl() const noexcept;
    ///Set the value of the column url
    void setUrl(const std::string &pUrl) noexcept;
    void setUrl(std::string &&pUrl) noexcept;

    /**  For column force_update  */
    ///Get the value of the column force_update, returns the default value if the column is null
    const int8_t &getValueOfForceUpdate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getForceUpdate() const noexcept;
    ///Set the value of the column force_update
    void setForceUpdate(const int8_t &pForceUpdate) noexcept;
    void setForceUpdateToNull() noexcept;

    /**  For column type  */
    ///Get the value of the column type, returns the default value if the column is null
    const std::string &getValueOfType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getType() const noexcept;
    ///Set the value of the column type
    void setType(const std::string &pType) noexcept;
    void setType(std::string &&pType) noexcept;

    /**  For column actived  */
    ///Get the value of the column actived, returns the default value if the column is null
    const int8_t &getValueOfActived() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getActived() const noexcept;
    ///Set the value of the column actived
    void setActived(const int8_t &pActived) noexcept;

    /**  For column remark  */
    ///Get the value of the column remark, returns the default value if the column is null
    const std::string &getValueOfRemark() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRemark() const noexcept;
    ///Set the value of the column remark
    void setRemark(const std::string &pRemark) noexcept;
    void setRemark(std::string &&pRemark) noexcept;
    void setRemarkToNull() noexcept;

    /**  For column ext  */
    ///Get the value of the column ext, returns the default value if the column is null
    const std::string &getValueOfExt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getExt() const noexcept;
    ///Set the value of the column ext
    void setExt(const std::string &pExt) noexcept;
    void setExt(std::string &&pExt) noexcept;
    void setExtToNull() noexcept;

    /**  For column createdAt  */
    ///Get the value of the column createdAt, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedat() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedat() const noexcept;
    ///Set the value of the column createdAt
    void setCreatedat(const ::trantor::Date &pCreatedat) noexcept;
    void setCreatedatToNull() noexcept;

    /**  For column updatedAt  */
    ///Get the value of the column updatedAt, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedat() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedat() const noexcept;
    ///Set the value of the column updatedAt
    void setUpdatedat(const ::trantor::Date &pUpdatedat) noexcept;
    void setUpdatedatToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 12;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Electrons>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Electrons>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> id_;
    std::shared_ptr<std::string> platform_;
    std::shared_ptr<std::string> version_;
    std::shared_ptr<std::string> archs_;
    std::shared_ptr<std::string> url_;
    std::shared_ptr<int8_t> forceUpdate_;
    std::shared_ptr<std::string> type_;
    std::shared_ptr<int8_t> actived_;
    std::shared_ptr<std::string> remark_;
    std::shared_ptr<std::string> ext_;
    std::shared_ptr<::trantor::Date> createdat_;
    std::shared_ptr<::trantor::Date> updatedat_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[12]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "platform,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "version,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "archs,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "url,";
            ++parametersCount;
        }
        sql += "force_update,";
        ++parametersCount;
        if(!dirtyFlag_[5])
        {
            needSelection=true;
        }
        if(dirtyFlag_[6])
        {
            sql += "type,";
            ++parametersCount;
        }
        sql += "actived,";
        ++parametersCount;
        if(!dirtyFlag_[7])
        {
            needSelection=true;
        }
        if(dirtyFlag_[8])
        {
            sql += "remark,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "ext,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "createdAt,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "updatedAt,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace database_test
} // namespace drogon_model
