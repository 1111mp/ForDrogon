/**
 *
 *  Electrons.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Electrons.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::database_test;

const std::string Electrons::Cols::_id = "id";
const std::string Electrons::Cols::_platform = "platform";
const std::string Electrons::Cols::_version = "version";
const std::string Electrons::Cols::_archs = "archs";
const std::string Electrons::Cols::_url = "url";
const std::string Electrons::Cols::_force_update = "force_update";
const std::string Electrons::Cols::_type = "type";
const std::string Electrons::Cols::_actived = "actived";
const std::string Electrons::Cols::_remark = "remark";
const std::string Electrons::Cols::_ext = "ext";
const std::string Electrons::Cols::_createdAt = "createdAt";
const std::string Electrons::Cols::_updatedAt = "updatedAt";
const std::string Electrons::primaryKeyName = "id";
const bool Electrons::hasPrimaryKey = true;
const std::string Electrons::tableName = "electrons";

const std::vector<typename Electrons::MetaData> Electrons::metaData_={
{"id","int32_t","int(11)",4,1,1,1},
{"platform","std::string","varchar(255)",255,0,0,0},
{"version","std::string","varchar(255)",255,0,0,1},
{"archs","std::string","varchar(255)",255,0,0,1},
{"url","std::string","varchar(255)",255,0,0,1},
{"force_update","int8_t","tinyint(1)",1,0,0,0},
{"type","std::string","varchar(255)",255,0,0,1},
{"actived","int8_t","tinyint(1)",1,0,0,1},
{"remark","std::string","varchar(255)",255,0,0,0},
{"ext","std::string","varchar(255)",255,0,0,0},
{"createdAt","::trantor::Date","datetime",0,0,0,0},
{"updatedAt","::trantor::Date","datetime",0,0,0,0}
};
const std::string &Electrons::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Electrons::Electrons(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["platform"].isNull())
        {
            platform_=std::make_shared<std::string>(r["platform"].as<std::string>());
        }
        if(!r["version"].isNull())
        {
            version_=std::make_shared<std::string>(r["version"].as<std::string>());
        }
        if(!r["archs"].isNull())
        {
            archs_=std::make_shared<std::string>(r["archs"].as<std::string>());
        }
        if(!r["url"].isNull())
        {
            url_=std::make_shared<std::string>(r["url"].as<std::string>());
        }
        if(!r["force_update"].isNull())
        {
            forceUpdate_=std::make_shared<int8_t>(r["force_update"].as<int8_t>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["actived"].isNull())
        {
            actived_=std::make_shared<int8_t>(r["actived"].as<int8_t>());
        }
        if(!r["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(r["remark"].as<std::string>());
        }
        if(!r["ext"].isNull())
        {
            ext_=std::make_shared<std::string>(r["ext"].as<std::string>());
        }
        if(!r["createdAt"].isNull())
        {
            auto timeStr = r["createdAt"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updatedAt"].isNull())
        {
            auto timeStr = r["updatedAt"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 12 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            platform_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            version_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            archs_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            url_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            forceUpdate_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            type_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            actived_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            remark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            ext_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

Electrons::Electrons(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            platform_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            version_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            archs_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            url_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            forceUpdate_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            actived_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            ext_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

Electrons::Electrons(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("platform"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["platform"].isNull())
        {
            platform_=std::make_shared<std::string>(pJson["platform"].asString());
        }
    }
    if(pJson.isMember("version"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["version"].isNull())
        {
            version_=std::make_shared<std::string>(pJson["version"].asString());
        }
    }
    if(pJson.isMember("archs"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["archs"].isNull())
        {
            archs_=std::make_shared<std::string>(pJson["archs"].asString());
        }
    }
    if(pJson.isMember("url"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["url"].isNull())
        {
            url_=std::make_shared<std::string>(pJson["url"].asString());
        }
    }
    if(pJson.isMember("force_update"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["force_update"].isNull())
        {
            forceUpdate_=std::make_shared<int8_t>((int8_t)pJson["force_update"].asInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("actived"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["actived"].isNull())
        {
            actived_=std::make_shared<int8_t>((int8_t)pJson["actived"].asInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("ext"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["ext"].isNull())
        {
            ext_=std::make_shared<std::string>(pJson["ext"].asString());
        }
    }
    if(pJson.isMember("createdAt"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["createdAt"].isNull())
        {
            auto timeStr = pJson["createdAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedAt"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["updatedAt"].isNull())
        {
            auto timeStr = pJson["updatedAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Electrons::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            platform_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            version_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            archs_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            url_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            forceUpdate_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            actived_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            remark_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            ext_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Electrons::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("platform"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["platform"].isNull())
        {
            platform_=std::make_shared<std::string>(pJson["platform"].asString());
        }
    }
    if(pJson.isMember("version"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["version"].isNull())
        {
            version_=std::make_shared<std::string>(pJson["version"].asString());
        }
    }
    if(pJson.isMember("archs"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["archs"].isNull())
        {
            archs_=std::make_shared<std::string>(pJson["archs"].asString());
        }
    }
    if(pJson.isMember("url"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["url"].isNull())
        {
            url_=std::make_shared<std::string>(pJson["url"].asString());
        }
    }
    if(pJson.isMember("force_update"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["force_update"].isNull())
        {
            forceUpdate_=std::make_shared<int8_t>((int8_t)pJson["force_update"].asInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("actived"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["actived"].isNull())
        {
            actived_=std::make_shared<int8_t>((int8_t)pJson["actived"].asInt64());
        }
    }
    if(pJson.isMember("remark"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["remark"].isNull())
        {
            remark_=std::make_shared<std::string>(pJson["remark"].asString());
        }
    }
    if(pJson.isMember("ext"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["ext"].isNull())
        {
            ext_=std::make_shared<std::string>(pJson["ext"].asString());
        }
    }
    if(pJson.isMember("createdAt"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["createdAt"].isNull())
        {
            auto timeStr = pJson["createdAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedAt"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["updatedAt"].isNull())
        {
            auto timeStr = pJson["updatedAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const int32_t &Electrons::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Electrons::getId() const noexcept
{
    return id_;
}
void Electrons::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Electrons::PrimaryKeyType & Electrons::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Electrons::getValueOfPlatform() const noexcept
{
    const static std::string defaultValue = std::string();
    if(platform_)
        return *platform_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Electrons::getPlatform() const noexcept
{
    return platform_;
}
void Electrons::setPlatform(const std::string &pPlatform) noexcept
{
    platform_ = std::make_shared<std::string>(pPlatform);
    dirtyFlag_[1] = true;
}
void Electrons::setPlatform(std::string &&pPlatform) noexcept
{
    platform_ = std::make_shared<std::string>(std::move(pPlatform));
    dirtyFlag_[1] = true;
}
void Electrons::setPlatformToNull() noexcept
{
    platform_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Electrons::getValueOfVersion() const noexcept
{
    const static std::string defaultValue = std::string();
    if(version_)
        return *version_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Electrons::getVersion() const noexcept
{
    return version_;
}
void Electrons::setVersion(const std::string &pVersion) noexcept
{
    version_ = std::make_shared<std::string>(pVersion);
    dirtyFlag_[2] = true;
}
void Electrons::setVersion(std::string &&pVersion) noexcept
{
    version_ = std::make_shared<std::string>(std::move(pVersion));
    dirtyFlag_[2] = true;
}

const std::string &Electrons::getValueOfArchs() const noexcept
{
    const static std::string defaultValue = std::string();
    if(archs_)
        return *archs_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Electrons::getArchs() const noexcept
{
    return archs_;
}
void Electrons::setArchs(const std::string &pArchs) noexcept
{
    archs_ = std::make_shared<std::string>(pArchs);
    dirtyFlag_[3] = true;
}
void Electrons::setArchs(std::string &&pArchs) noexcept
{
    archs_ = std::make_shared<std::string>(std::move(pArchs));
    dirtyFlag_[3] = true;
}

const std::string &Electrons::getValueOfUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(url_)
        return *url_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Electrons::getUrl() const noexcept
{
    return url_;
}
void Electrons::setUrl(const std::string &pUrl) noexcept
{
    url_ = std::make_shared<std::string>(pUrl);
    dirtyFlag_[4] = true;
}
void Electrons::setUrl(std::string &&pUrl) noexcept
{
    url_ = std::make_shared<std::string>(std::move(pUrl));
    dirtyFlag_[4] = true;
}

const int8_t &Electrons::getValueOfForceUpdate() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(forceUpdate_)
        return *forceUpdate_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Electrons::getForceUpdate() const noexcept
{
    return forceUpdate_;
}
void Electrons::setForceUpdate(const int8_t &pForceUpdate) noexcept
{
    forceUpdate_ = std::make_shared<int8_t>(pForceUpdate);
    dirtyFlag_[5] = true;
}
void Electrons::setForceUpdateToNull() noexcept
{
    forceUpdate_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Electrons::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Electrons::getType() const noexcept
{
    return type_;
}
void Electrons::setType(const std::string &pType) noexcept
{
    type_ = std::make_shared<std::string>(pType);
    dirtyFlag_[6] = true;
}
void Electrons::setType(std::string &&pType) noexcept
{
    type_ = std::make_shared<std::string>(std::move(pType));
    dirtyFlag_[6] = true;
}

const int8_t &Electrons::getValueOfActived() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(actived_)
        return *actived_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Electrons::getActived() const noexcept
{
    return actived_;
}
void Electrons::setActived(const int8_t &pActived) noexcept
{
    actived_ = std::make_shared<int8_t>(pActived);
    dirtyFlag_[7] = true;
}

const std::string &Electrons::getValueOfRemark() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remark_)
        return *remark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Electrons::getRemark() const noexcept
{
    return remark_;
}
void Electrons::setRemark(const std::string &pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(pRemark);
    dirtyFlag_[8] = true;
}
void Electrons::setRemark(std::string &&pRemark) noexcept
{
    remark_ = std::make_shared<std::string>(std::move(pRemark));
    dirtyFlag_[8] = true;
}
void Electrons::setRemarkToNull() noexcept
{
    remark_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Electrons::getValueOfExt() const noexcept
{
    const static std::string defaultValue = std::string();
    if(ext_)
        return *ext_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Electrons::getExt() const noexcept
{
    return ext_;
}
void Electrons::setExt(const std::string &pExt) noexcept
{
    ext_ = std::make_shared<std::string>(pExt);
    dirtyFlag_[9] = true;
}
void Electrons::setExt(std::string &&pExt) noexcept
{
    ext_ = std::make_shared<std::string>(std::move(pExt));
    dirtyFlag_[9] = true;
}
void Electrons::setExtToNull() noexcept
{
    ext_.reset();
    dirtyFlag_[9] = true;
}

const ::trantor::Date &Electrons::getValueOfCreatedat() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createdat_)
        return *createdat_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Electrons::getCreatedat() const noexcept
{
    return createdat_;
}
void Electrons::setCreatedat(const ::trantor::Date &pCreatedat) noexcept
{
    createdat_ = std::make_shared<::trantor::Date>(pCreatedat);
    dirtyFlag_[10] = true;
}
void Electrons::setCreatedatToNull() noexcept
{
    createdat_.reset();
    dirtyFlag_[10] = true;
}

const ::trantor::Date &Electrons::getValueOfUpdatedat() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedat_)
        return *updatedat_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Electrons::getUpdatedat() const noexcept
{
    return updatedat_;
}
void Electrons::setUpdatedat(const ::trantor::Date &pUpdatedat) noexcept
{
    updatedat_ = std::make_shared<::trantor::Date>(pUpdatedat);
    dirtyFlag_[11] = true;
}
void Electrons::setUpdatedatToNull() noexcept
{
    updatedat_.reset();
    dirtyFlag_[11] = true;
}

void Electrons::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &Electrons::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "platform",
        "version",
        "archs",
        "url",
        "force_update",
        "type",
        "actived",
        "remark",
        "ext",
        "createdAt",
        "updatedAt"
    };
    return inCols;
}

void Electrons::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getPlatform())
        {
            binder << getValueOfPlatform();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getVersion())
        {
            binder << getValueOfVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getArchs())
        {
            binder << getValueOfArchs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getForceUpdate())
        {
            binder << getValueOfForceUpdate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getActived())
        {
            binder << getValueOfActived();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getExt())
        {
            binder << getValueOfExt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatedat())
        {
            binder << getValueOfCreatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatedat())
        {
            binder << getValueOfUpdatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Electrons::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    return ret;
}

void Electrons::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getPlatform())
        {
            binder << getValueOfPlatform();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getVersion())
        {
            binder << getValueOfVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getArchs())
        {
            binder << getValueOfArchs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getForceUpdate())
        {
            binder << getValueOfForceUpdate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getActived())
        {
            binder << getValueOfActived();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getRemark())
        {
            binder << getValueOfRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getExt())
        {
            binder << getValueOfExt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatedat())
        {
            binder << getValueOfCreatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatedat())
        {
            binder << getValueOfUpdatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Electrons::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getPlatform())
    {
        ret["platform"]=getValueOfPlatform();
    }
    else
    {
        ret["platform"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    if(getArchs())
    {
        ret["archs"]=getValueOfArchs();
    }
    else
    {
        ret["archs"]=Json::Value();
    }
    if(getUrl())
    {
        ret["url"]=getValueOfUrl();
    }
    else
    {
        ret["url"]=Json::Value();
    }
    if(getForceUpdate())
    {
        ret["force_update"]=getValueOfForceUpdate();
    }
    else
    {
        ret["force_update"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getActived())
    {
        ret["actived"]=getValueOfActived();
    }
    else
    {
        ret["actived"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getExt())
    {
        ret["ext"]=getValueOfExt();
    }
    else
    {
        ret["ext"]=Json::Value();
    }
    if(getCreatedat())
    {
        ret["createdAt"]=getCreatedat()->toDbStringLocal();
    }
    else
    {
        ret["createdAt"]=Json::Value();
    }
    if(getUpdatedat())
    {
        ret["updatedAt"]=getUpdatedat()->toDbStringLocal();
    }
    else
    {
        ret["updatedAt"]=Json::Value();
    }
    return ret;
}

Json::Value Electrons::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 12)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getPlatform())
            {
                ret[pMasqueradingVector[1]]=getValueOfPlatform();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getVersion())
            {
                ret[pMasqueradingVector[2]]=getValueOfVersion();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getArchs())
            {
                ret[pMasqueradingVector[3]]=getValueOfArchs();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getUrl())
            {
                ret[pMasqueradingVector[4]]=getValueOfUrl();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getForceUpdate())
            {
                ret[pMasqueradingVector[5]]=getValueOfForceUpdate();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[6]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getActived())
            {
                ret[pMasqueradingVector[7]]=getValueOfActived();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getRemark())
            {
                ret[pMasqueradingVector[8]]=getValueOfRemark();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getExt())
            {
                ret[pMasqueradingVector[9]]=getValueOfExt();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getCreatedat())
            {
                ret[pMasqueradingVector[10]]=getCreatedat()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getUpdatedat())
            {
                ret[pMasqueradingVector[11]]=getUpdatedat()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getPlatform())
    {
        ret["platform"]=getValueOfPlatform();
    }
    else
    {
        ret["platform"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    if(getArchs())
    {
        ret["archs"]=getValueOfArchs();
    }
    else
    {
        ret["archs"]=Json::Value();
    }
    if(getUrl())
    {
        ret["url"]=getValueOfUrl();
    }
    else
    {
        ret["url"]=Json::Value();
    }
    if(getForceUpdate())
    {
        ret["force_update"]=getValueOfForceUpdate();
    }
    else
    {
        ret["force_update"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getActived())
    {
        ret["actived"]=getValueOfActived();
    }
    else
    {
        ret["actived"]=Json::Value();
    }
    if(getRemark())
    {
        ret["remark"]=getValueOfRemark();
    }
    else
    {
        ret["remark"]=Json::Value();
    }
    if(getExt())
    {
        ret["ext"]=getValueOfExt();
    }
    else
    {
        ret["ext"]=Json::Value();
    }
    if(getCreatedat())
    {
        ret["createdAt"]=getCreatedat()->toDbStringLocal();
    }
    else
    {
        ret["createdAt"]=Json::Value();
    }
    if(getUpdatedat())
    {
        ret["updatedAt"]=getUpdatedat()->toDbStringLocal();
    }
    else
    {
        ret["updatedAt"]=Json::Value();
    }
    return ret;
}

bool Electrons::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("platform"))
    {
        if(!validJsonOfField(1, "platform", pJson["platform"], err, true))
            return false;
    }
    if(pJson.isMember("version"))
    {
        if(!validJsonOfField(2, "version", pJson["version"], err, true))
            return false;
    }
    else
    {
        err="The version column cannot be null";
        return false;
    }
    if(pJson.isMember("archs"))
    {
        if(!validJsonOfField(3, "archs", pJson["archs"], err, true))
            return false;
    }
    else
    {
        err="The archs column cannot be null";
        return false;
    }
    if(pJson.isMember("url"))
    {
        if(!validJsonOfField(4, "url", pJson["url"], err, true))
            return false;
    }
    else
    {
        err="The url column cannot be null";
        return false;
    }
    if(pJson.isMember("force_update"))
    {
        if(!validJsonOfField(5, "force_update", pJson["force_update"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(6, "type", pJson["type"], err, true))
            return false;
    }
    else
    {
        err="The type column cannot be null";
        return false;
    }
    if(pJson.isMember("actived"))
    {
        if(!validJsonOfField(7, "actived", pJson["actived"], err, true))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(8, "remark", pJson["remark"], err, true))
            return false;
    }
    if(pJson.isMember("ext"))
    {
        if(!validJsonOfField(9, "ext", pJson["ext"], err, true))
            return false;
    }
    if(pJson.isMember("createdAt"))
    {
        if(!validJsonOfField(10, "createdAt", pJson["createdAt"], err, true))
            return false;
    }
    if(pJson.isMember("updatedAt"))
    {
        if(!validJsonOfField(11, "updatedAt", pJson["updatedAt"], err, true))
            return false;
    }
    return true;
}
bool Electrons::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Electrons::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("platform"))
    {
        if(!validJsonOfField(1, "platform", pJson["platform"], err, false))
            return false;
    }
    if(pJson.isMember("version"))
    {
        if(!validJsonOfField(2, "version", pJson["version"], err, false))
            return false;
    }
    if(pJson.isMember("archs"))
    {
        if(!validJsonOfField(3, "archs", pJson["archs"], err, false))
            return false;
    }
    if(pJson.isMember("url"))
    {
        if(!validJsonOfField(4, "url", pJson["url"], err, false))
            return false;
    }
    if(pJson.isMember("force_update"))
    {
        if(!validJsonOfField(5, "force_update", pJson["force_update"], err, false))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(6, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("actived"))
    {
        if(!validJsonOfField(7, "actived", pJson["actived"], err, false))
            return false;
    }
    if(pJson.isMember("remark"))
    {
        if(!validJsonOfField(8, "remark", pJson["remark"], err, false))
            return false;
    }
    if(pJson.isMember("ext"))
    {
        if(!validJsonOfField(9, "ext", pJson["ext"], err, false))
            return false;
    }
    if(pJson.isMember("createdAt"))
    {
        if(!validJsonOfField(10, "createdAt", pJson["createdAt"], err, false))
            return false;
    }
    if(pJson.isMember("updatedAt"))
    {
        if(!validJsonOfField(11, "updatedAt", pJson["updatedAt"], err, false))
            return false;
    }
    return true;
}
bool Electrons::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Electrons::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson,
                                 std::string &err,
                                 bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
